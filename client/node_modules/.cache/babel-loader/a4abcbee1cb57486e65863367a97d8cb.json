{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PivotData = exports.sortAs = exports.getSort = exports.numberFormat = exports.naturalSort = exports.locales = exports.derivers = exports.aggregators = exports.aggregatorTemplates = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\n\nvar addSeparators = function addSeparators(nStr, thousandsSep, decimalSep) {\n  var x = String(nStr).split('.');\n  var x1 = x[0];\n  var x2 = x.length > 1 ? decimalSep + x[1] : '';\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n  }\n\n  return x1 + x2;\n};\n\nvar numberFormat = function numberFormat(opts_in) {\n  var defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: ''\n  };\n  var opts = Object.assign({}, defaults, opts_in);\n  return function (x) {\n    if (isNaN(x) || !isFinite(x)) {\n      return '';\n    }\n\n    var result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n    return '' + opts.prefix + result + opts.suffix;\n  };\n};\n\nvar rx = /(\\d+)|(\\D+)/g;\nvar rd = /\\d/;\nvar rz = /^0/;\n\nvar naturalSort = function naturalSort(as, bs) {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n\n  if (as !== null && bs === null) {\n    return 1;\n  } // then raw NaNs\n\n\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1;\n  }\n\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1;\n  } // numbers and numbery strings group together\n\n\n  var nas = Number(as);\n  var nbs = Number(bs);\n\n  if (nas < nbs) {\n    return -1;\n  }\n\n  if (nas > nbs) {\n    return 1;\n  } // within that, true numbers before numbery strings\n\n\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  } // 'Infinity' is a textual number, so less than 'A'\n\n\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1;\n  }\n\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1;\n  } // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n\n\n  var a = String(as);\n  var b = String(bs);\n\n  if (a === b) {\n    return 0;\n  }\n\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  } // special treatment for strings containing digits\n\n\n  a = a.match(rx);\n  b = b.match(rx);\n\n  while (a.length && b.length) {\n    var a1 = a.shift();\n    var b1 = b.shift();\n\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n\n  return a.length - b.length;\n};\n\nvar sortAs = function sortAs(order) {\n  var mapping = {}; // sort lowercased keys similarly\n\n  var l_mapping = {};\n\n  for (var i in order) {\n    var x = order[i];\n    mapping[x] = i;\n\n    if (typeof x === 'string') {\n      l_mapping[x.toLowerCase()] = i;\n    }\n  }\n\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    } else if (a in mapping) {\n      return -1;\n    } else if (b in mapping) {\n      return 1;\n    } else if (a in l_mapping && b in l_mapping) {\n      return l_mapping[a] - l_mapping[b];\n    } else if (a in l_mapping) {\n      return -1;\n    } else if (b in l_mapping) {\n      return 1;\n    }\n\n    return naturalSort(a, b);\n  };\n};\n\nvar getSort = function getSort(sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      var sort = sorters(attr);\n\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n\n  return naturalSort;\n}; // aggregator templates default to US number formatting but this is overrideable\n\n\nvar usFmt = numberFormat();\nvar usFmtInt = numberFormat({\n  digitsAfterDecimal: 0\n});\nvar usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%'\n});\nvar aggregatorTemplates = {\n  count: function count() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmtInt;\n    return function () {\n      return function () {\n        return {\n          count: 0,\n          push: function push() {\n            this.count++;\n          },\n          value: function value() {\n            return this.count;\n          },\n          format: formatter\n        };\n      };\n    };\n  },\n  uniques: function uniques(fn) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmtInt;\n    return function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          attr = _ref2[0];\n\n      return function () {\n        return {\n          uniq: [],\n          push: function push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value: function value() {\n            return fn(this.uniq);\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  sum: function sum() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmt;\n    return function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          attr = _ref4[0];\n\n      return function () {\n        return {\n          sum: 0,\n          push: function push(record) {\n            if (!isNaN(parseFloat(record[attr]))) {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value: function value() {\n            return this.sum;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  extremes: function extremes(mode) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmt;\n    return function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          attr = _ref6[0];\n\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(typeof data !== 'undefined' ? data.sorters : null, attr),\n          push: function push(record) {\n            var x = record[attr];\n\n            if (['min', 'max'].includes(mode)) {\n              x = parseFloat(x);\n\n              if (!isNaN(x)) {\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\n              }\n            }\n\n            if (mode === 'first' && this.sorter(x, this.val !== null ? this.val : x) <= 0) {\n              this.val = x;\n            }\n\n            if (mode === 'last' && this.sorter(x, this.val !== null ? this.val : x) >= 0) {\n              this.val = x;\n            }\n          },\n          value: function value() {\n            return this.val;\n          },\n          format: function format(x) {\n            if (isNaN(x)) {\n              return x;\n            }\n\n            return formatter(x);\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  quantile: function quantile(q) {\n    var formatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : usFmt;\n    return function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          attr = _ref8[0];\n\n      return function () {\n        return {\n          vals: [],\n          push: function push(record) {\n            var x = parseFloat(record[attr]);\n\n            if (!isNaN(x)) {\n              this.vals.push(x);\n            }\n          },\n          value: function value() {\n            if (this.vals.length === 0) {\n              return null;\n            }\n\n            this.vals.sort(function (a, b) {\n              return a - b;\n            });\n            var i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  runningStat: function runningStat() {\n    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mean';\n    var ddof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var formatter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : usFmt;\n    return function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n          attr = _ref10[0];\n\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          push: function push(record) {\n            var x = parseFloat(record[attr]);\n\n            if (isNaN(x)) {\n              return;\n            }\n\n            this.n += 1.0;\n\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n\n            var m_new = this.m + (x - this.m) / this.n;\n            this.s = this.s + (x - this.m) * (x - m_new);\n            this.m = m_new;\n          },\n          value: function value() {\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n\n              return this.m;\n            }\n\n            if (this.n <= ddof) {\n              return 0;\n            }\n\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n  sumOverSum: function sumOverSum() {\n    var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : usFmt;\n    return function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n          num = _ref12[0],\n          denom = _ref12[1];\n\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push: function push(record) {\n            if (!isNaN(parseFloat(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n\n            if (!isNaN(parseFloat(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value: function value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs: typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2\n        };\n      };\n    };\n  },\n  fractionOf: function fractionOf(wrapped) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'total';\n    var formatter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : usFmtPct;\n    return function () {\n      for (var _len = arguments.length, x = Array(_len), _key = 0; _key < _len; _key++) {\n        x[_key] = arguments[_key];\n      }\n\n      return function (data, rowKey, colKey) {\n        return {\n          selector: {\n            total: [[], []],\n            row: [rowKey, []],\n            col: [[], colKey]\n          }[type],\n          inner: wrapped.apply(undefined, _toConsumableArray(Array.from(x || [])))(data, rowKey, colKey),\n          push: function push(record) {\n            this.inner.push(record);\n          },\n          format: formatter,\n          value: function value() {\n            return this.inner.value() / data.getAggregator.apply(data, _toConsumableArray(Array.from(this.selector || []))).inner.value();\n          },\n          numInputs: wrapped.apply(undefined, _toConsumableArray(Array.from(x || [])))().numInputs\n        };\n      };\n    };\n  }\n};\n\naggregatorTemplates.countUnique = function (f) {\n  return aggregatorTemplates.uniques(function (x) {\n    return x.length;\n  }, f);\n};\n\naggregatorTemplates.listUnique = function (s) {\n  return aggregatorTemplates.uniques(function (x) {\n    return x.join(s);\n  }, function (x) {\n    return x;\n  });\n};\n\naggregatorTemplates.max = function (f) {\n  return aggregatorTemplates.extremes('max', f);\n};\n\naggregatorTemplates.min = function (f) {\n  return aggregatorTemplates.extremes('min', f);\n};\n\naggregatorTemplates.first = function (f) {\n  return aggregatorTemplates.extremes('first', f);\n};\n\naggregatorTemplates.last = function (f) {\n  return aggregatorTemplates.extremes('last', f);\n};\n\naggregatorTemplates.median = function (f) {\n  return aggregatorTemplates.quantile(0.5, f);\n};\n\naggregatorTemplates.average = function (f) {\n  return aggregatorTemplates.runningStat('mean', 1, f);\n};\n\naggregatorTemplates.var = function (ddof, f) {\n  return aggregatorTemplates.runningStat('var', ddof, f);\n};\n\naggregatorTemplates.stdev = function (ddof, f) {\n  return aggregatorTemplates.runningStat('stdev', ddof, f);\n}; // default aggregators & renderers use US naming and number formatting\n\n\nvar aggregators = function (tpl) {\n  return {\n    Count: tpl.count(usFmtInt),\n    'Count Unique Values': tpl.countUnique(usFmtInt),\n    'List Unique Values': tpl.listUnique(', '),\n    Sum: tpl.sum(usFmt),\n    'Integer Sum': tpl.sum(usFmtInt),\n    Average: tpl.average(usFmt),\n    Median: tpl.median(usFmt),\n    'Sample Variance': tpl.var(1, usFmt),\n    'Sample Standard Deviation': tpl.stdev(1, usFmt),\n    Minimum: tpl.min(usFmt),\n    Maximum: tpl.max(usFmt),\n    First: tpl.first(usFmt),\n    Last: tpl.last(usFmt),\n    'Sum over Sum': tpl.sumOverSum(usFmt),\n    'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n    'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n    'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n    'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n    'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n    'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct)\n  };\n}(aggregatorTemplates);\n\nvar locales = {\n  en: {\n    aggregators: aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by'\n    }\n  }\n}; // dateFormat deriver l10n requires month and day names to be passed in directly\n\nvar mthNamesEn = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nvar zeroPad = function zeroPad(number) {\n  return ('0' + number).substr(-2, 2);\n}; // eslint-disable-line no-magic-numbers\n\n\nvar derivers = {\n  bin: function bin(col, binWidth) {\n    return function (record) {\n      return record[col] - record[col] % binWidth;\n    };\n  },\n  dateFormat: function dateFormat(col, formatString) {\n    var utcOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var mthNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : mthNamesEn;\n    var dayNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : dayNamesEn;\n    var utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      var date = new Date(Date.parse(record[col]));\n\n      if (isNaN(date)) {\n        return '';\n      }\n\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date['get' + utc + 'FullYear']();\n\n          case 'm':\n            return zeroPad(date['get' + utc + 'Month']() + 1);\n\n          case 'n':\n            return mthNames[date['get' + utc + 'Month']()];\n\n          case 'd':\n            return zeroPad(date['get' + utc + 'Date']());\n\n          case 'w':\n            return dayNames[date['get' + utc + 'Day']()];\n\n          case 'x':\n            return date['get' + utc + 'Day']();\n\n          case 'H':\n            return zeroPad(date['get' + utc + 'Hours']());\n\n          case 'M':\n            return zeroPad(date['get' + utc + 'Minutes']());\n\n          case 'S':\n            return zeroPad(date['get' + utc + 'Seconds']());\n\n          default:\n            return '%' + p;\n        }\n      });\n    };\n  }\n};\n/*\nData Model class\n*/\n\nvar PivotData = function () {\n  function PivotData() {\n    var _this = this;\n\n    var inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PivotData);\n\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\n\n    _propTypes2.default.checkPropTypes(PivotData.propTypes, this.props, 'prop', 'PivotData');\n\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](this.props.vals);\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.sorted = false; // iterate through input, accumulating data for cells\n\n    PivotData.forEachRecord(this.props.data, this.props.derivedAttributes, function (record) {\n      if (_this.filter(record)) {\n        _this.processRecord(record);\n      }\n    });\n  }\n\n  _createClass(PivotData, [{\n    key: 'filter',\n    value: function filter(record) {\n      for (var k in this.props.valueFilter) {\n        if (record[k] in this.props.valueFilter[k]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: 'forEachMatchingRecord',\n    value: function forEachMatchingRecord(criteria, callback) {\n      var _this2 = this;\n\n      return PivotData.forEachRecord(this.props.data, this.props.derivedAttributes, function (record) {\n        if (!_this2.filter(record)) {\n          return;\n        }\n\n        for (var k in criteria) {\n          var v = criteria[k];\n\n          if (v !== (k in record ? record[k] : 'null')) {\n            return;\n          }\n        }\n\n        callback(record);\n      });\n    }\n  }, {\n    key: 'arrSort',\n    value: function arrSort(attrs) {\n      var _this3 = this;\n\n      var a = void 0;\n\n      var sortersArr = function () {\n        var result = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Array.from(attrs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            a = _step.value;\n            result.push(getSort(_this3.props.sorters, a));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return result;\n      }();\n\n      return function (a, b) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = Object.keys(sortersArr || {})[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var i = _step2.value;\n            var sorter = sortersArr[i];\n            var comparison = sorter(a[i], b[i]);\n\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return 0;\n      };\n    }\n  }, {\n    key: 'sortKeys',\n    value: function sortKeys() {\n      var _this4 = this;\n\n      if (!this.sorted) {\n        this.sorted = true;\n\n        var v = function v(r, c) {\n          return _this4.getAggregator(r, c).value();\n        };\n\n        switch (this.props.rowOrder) {\n          case 'value_a_to_z':\n            this.rowKeys.sort(function (a, b) {\n              return naturalSort(v(a, []), v(b, []));\n            });\n            break;\n\n          case 'value_z_to_a':\n            this.rowKeys.sort(function (a, b) {\n              return -naturalSort(v(a, []), v(b, []));\n            });\n            break;\n\n          default:\n            this.rowKeys.sort(this.arrSort(this.props.rows));\n        }\n\n        switch (this.props.colOrder) {\n          case 'value_a_to_z':\n            this.colKeys.sort(function (a, b) {\n              return naturalSort(v([], a), v([], b));\n            });\n            break;\n\n          case 'value_z_to_a':\n            this.colKeys.sort(function (a, b) {\n              return -naturalSort(v([], a), v([], b));\n            });\n            break;\n\n          default:\n            this.colKeys.sort(this.arrSort(this.props.cols));\n        }\n      }\n    }\n  }, {\n    key: 'getColKeys',\n    value: function getColKeys() {\n      this.sortKeys();\n      return this.colKeys;\n    }\n  }, {\n    key: 'getRowKeys',\n    value: function getRowKeys() {\n      this.sortKeys();\n      return this.rowKeys;\n    }\n  }, {\n    key: 'processRecord',\n    value: function processRecord(record) {\n      // this code is called in a tight loop\n      var colKey = [];\n      var rowKey = [];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = Array.from(this.props.cols)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var x = _step3.value;\n          colKey.push(x in record ? record[x] : 'null');\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = Array.from(this.props.rows)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _x16 = _step4.value;\n          rowKey.push(_x16 in record ? record[_x16] : 'null');\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var flatRowKey = rowKey.join(String.fromCharCode(0));\n      var flatColKey = colKey.join(String.fromCharCode(0));\n      this.allTotal.push(record);\n\n      if (rowKey.length !== 0) {\n        if (!this.rowTotals[flatRowKey]) {\n          this.rowKeys.push(rowKey);\n          this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n        }\n\n        this.rowTotals[flatRowKey].push(record);\n      }\n\n      if (colKey.length !== 0) {\n        if (!this.colTotals[flatColKey]) {\n          this.colKeys.push(colKey);\n          this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n        }\n\n        this.colTotals[flatColKey].push(record);\n      }\n\n      if (colKey.length !== 0 && rowKey.length !== 0) {\n        if (!this.tree[flatRowKey]) {\n          this.tree[flatRowKey] = {};\n        }\n\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n        }\n\n        this.tree[flatRowKey][flatColKey].push(record);\n      }\n    }\n  }, {\n    key: 'getAggregator',\n    value: function getAggregator(rowKey, colKey) {\n      var agg = void 0;\n      var flatRowKey = rowKey.join(String.fromCharCode(0));\n      var flatColKey = colKey.join(String.fromCharCode(0));\n\n      if (rowKey.length === 0 && colKey.length === 0) {\n        agg = this.allTotal;\n      } else if (rowKey.length === 0) {\n        agg = this.colTotals[flatColKey];\n      } else if (colKey.length === 0) {\n        agg = this.rowTotals[flatRowKey];\n      } else {\n        agg = this.tree[flatRowKey][flatColKey];\n      }\n\n      return agg || {\n        value: function value() {\n          return null;\n        },\n        format: function format() {\n          return '';\n        }\n      };\n    }\n  }]);\n\n  return PivotData;\n}(); // can handle arrays or jQuery selections of tables\n\n\nPivotData.forEachRecord = function (input, derivedAttributes, f) {\n  var addRecord = void 0,\n      record = void 0;\n\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\n    addRecord = f;\n  } else {\n    addRecord = function addRecord(record) {\n      for (var k in derivedAttributes) {\n        var derived = derivedAttributes[k](record);\n\n        if (derived !== null) {\n          record[k] = derived;\n        }\n      }\n\n      return f(record);\n    };\n  } // if it's a function, have it call us back\n\n\n  if (typeof input === 'function') {\n    return input(addRecord);\n  } else if (Array.isArray(input)) {\n    if (Array.isArray(input[0])) {\n      // array of arrays\n      return function () {\n        var result = [];\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = Object.keys(input || {})[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var i = _step5.value;\n            var compactRecord = input[i];\n\n            if (i > 0) {\n              record = {};\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = Object.keys(input[0] || {})[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var j = _step6.value;\n                  var k = input[0][j];\n                  record[k] = compactRecord[j];\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              result.push(addRecord(record));\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n\n        return result;\n      }();\n    } // array of objects\n\n\n    return function () {\n      var result1 = [];\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = Array.from(input)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          record = _step7.value;\n          result1.push(addRecord(record));\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      return result1;\n    }();\n  }\n\n  throw new Error('unknown input format');\n};\n\nPivotData.defaultProps = {\n  aggregators: aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  valueFilter: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n  derivedAttributes: {}\n};\nPivotData.propTypes = {\n  data: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.func]).isRequired,\n  aggregatorName: _propTypes2.default.string,\n  cols: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  rows: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  vals: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  valueFilter: _propTypes2.default.objectOf(_propTypes2.default.objectOf(_propTypes2.default.bool)),\n  sorters: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.objectOf(_propTypes2.default.func)]),\n  derivedAttributes: _propTypes2.default.objectOf(_propTypes2.default.func),\n  rowOrder: _propTypes2.default.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n  colOrder: _propTypes2.default.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a'])\n};\nexports.aggregatorTemplates = aggregatorTemplates;\nexports.aggregators = aggregators;\nexports.derivers = derivers;\nexports.locales = locales;\nexports.naturalSort = naturalSort;\nexports.numberFormat = numberFormat;\nexports.getSort = getSort;\nexports.sortAs = sortAs;\nexports.PivotData = PivotData;","map":{"version":3,"sources":["src/Utilities.js"],"names":["addSeparators","x","String","x1","x2","decimalSep","rgx","numberFormat","defaults","digitsAfterDecimal","scaler","thousandsSep","prefix","suffix","opts","Object","isNaN","isFinite","result","rx","rd","rz","naturalSort","bs","as","nas","Number","nbs","a","b","a1","b1","sortAs","mapping","l_mapping","order","getSort","sort","sorters","attr","usFmt","usFmtInt","usFmtPct","aggregatorTemplates","count","formatter","push","value","format","uniques","uniq","Array","record","fn","numInputs","sum","parseFloat","extremes","val","sorter","data","Math","mode","quantile","vals","i","runningStat","ddof","n","m","s","m_new","sumOverSum","num","denom","sumNum","sumDenom","fractionOf","type","selector","total","row","col","inner","wrapped","aggregators","Count","tpl","Sum","Average","Median","Minimum","Maximum","First","Last","locales","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","apply","cancel","totals","vs","by","mthNamesEn","dayNamesEn","zeroPad","derivers","bin","dateFormat","utcOutput","mthNames","dayNames","utc","date","Date","PivotData","inputProps","PropTypes","criteria","callback","v","k","attrs","sortersArr","comparison","colKey","rowKey","flatRowKey","flatColKey","agg","addRecord","derived","derivedAttributes","f","input","compactRecord","j","result1","cols","rows","aggregatorName","valueFilter","rowOrder","colOrder"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\n\n/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS104: Avoid inline assignments\n * DS201: Simplify complex destructure assignments\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\n\nconst addSeparators = function(nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function(opts_in) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: '',\n  };\n  const opts = Object.assign({}, defaults, opts_in);\n  return function(x) {\n    if (isNaN(x) || !isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n      opts.thousandsSep,\n      opts.decimalSep\n    );\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1;\n  }\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function(order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const l_mapping = {};\n  for (const i in order) {\n    const x = order[i];\n    mapping[x] = i;\n    if (typeof x === 'string') {\n      l_mapping[x.toLowerCase()] = i;\n    }\n  }\n  return function(a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    } else if (a in mapping) {\n      return -1;\n    } else if (b in mapping) {\n      return 1;\n    } else if (a in l_mapping && b in l_mapping) {\n      return l_mapping[a] - l_mapping[b];\n    } else if (a in l_mapping) {\n      return -1;\n    } else if (b in l_mapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function(sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overrideable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({digitsAfterDecimal: 0});\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%',\n});\n\nconst aggregatorTemplates = {\n  count(formatter = usFmtInt) {\n    return () =>\n      function() {\n        return {\n          count: 0,\n          push() {\n            this.count++;\n          },\n          value() {\n            return this.count;\n          },\n          format: formatter,\n        };\n      };\n  },\n\n  uniques(fn, formatter = usFmtInt) {\n    return function([attr]) {\n      return function() {\n        return {\n          uniq: [],\n          push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sum(formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          sum: 0,\n          push(record) {\n            if (!isNaN(parseFloat(record[attr]))) {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  extremes(mode, formatter = usFmt) {\n    return function([attr]) {\n      return function(data) {\n        return {\n          val: null,\n          sorter: getSort(\n            typeof data !== 'undefined' ? data.sorters : null,\n            attr\n          ),\n          push(record) {\n            let x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              x = parseFloat(x);\n              if (!isNaN(x)) {\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\n              }\n            }\n            if (\n              mode === 'first' &&\n              this.sorter(x, this.val !== null ? this.val : x) <= 0\n            ) {\n              this.val = x;\n            }\n            if (\n              mode === 'last' &&\n              this.sorter(x, this.val !== null ? this.val : x) >= 0\n            ) {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (isNaN(x)) {\n              return x;\n            }\n            return formatter(x);\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  quantile(q, formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          vals: [],\n          push(record) {\n            const x = parseFloat(record[attr]);\n            if (!isNaN(x)) {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (this.vals.length === 0) {\n              return null;\n            }\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\n    return function([attr]) {\n      return function() {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          push(record) {\n            const x = parseFloat(record[attr]);\n            if (isNaN(x)) {\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const m_new = this.m + (x - this.m) / this.n;\n            this.s = this.s + (x - this.m) * (x - m_new);\n            this.m = m_new;\n          },\n          value() {\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: formatter,\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sumOverSum(formatter = usFmt) {\n    return function([num, denom]) {\n      return function() {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!isNaN(parseFloat(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!isNaN(parseFloat(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n            typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2,\n        };\n      };\n    };\n  },\n\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\n    return (...x) =>\n      function(data, rowKey, colKey) {\n        return {\n          selector: {total: [[], []], row: [rowKey, []], col: [[], colKey]}[\n            type\n          ],\n          inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n          push(record) {\n            this.inner.push(record);\n          },\n          format: formatter,\n          value() {\n            return (\n              this.inner.value() /\n              data\n                .getAggregator(...Array.from(this.selector || []))\n                .inner.value()\n            );\n          },\n          numInputs: wrapped(...Array.from(x || []))().numInputs,\n        };\n      };\n  },\n};\n\naggregatorTemplates.countUnique = f =>\n  aggregatorTemplates.uniques(x => x.length, f);\naggregatorTemplates.listUnique = s =>\n  aggregatorTemplates.uniques(\n    x => x.join(s),\n    x => x\n  );\naggregatorTemplates.max = f => aggregatorTemplates.extremes('max', f);\naggregatorTemplates.min = f => aggregatorTemplates.extremes('min', f);\naggregatorTemplates.first = f => aggregatorTemplates.extremes('first', f);\naggregatorTemplates.last = f => aggregatorTemplates.extremes('last', f);\naggregatorTemplates.median = f => aggregatorTemplates.quantile(0.5, f);\naggregatorTemplates.average = f =>\n  aggregatorTemplates.runningStat('mean', 1, f);\naggregatorTemplates.var = (ddof, f) =>\n  aggregatorTemplates.runningStat('var', ddof, f);\naggregatorTemplates.stdev = (ddof, f) =>\n  aggregatorTemplates.runningStat('stdev', ddof, f);\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = (tpl => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct),\n}))(aggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by',\n    },\n  },\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = number => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return record => record[col] - (record[col] % binWidth);\n  },\n  dateFormat(\n    col,\n    formatString,\n    utcOutput = false,\n    mthNames = mthNamesEn,\n    dayNames = dayNamesEn\n  ) {\n    const utc = utcOutput ? 'UTC' : '';\n    return function(record) {\n      const date = new Date(Date.parse(record[col]));\n      if (isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function(m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;\n        }\n      });\n    };\n  },\n};\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps = {}) {\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\n    PropTypes.checkPropTypes(\n      PivotData.propTypes,\n      this.props,\n      'prop',\n      'PivotData'\n    );\n\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](\n      this.props.vals\n    );\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(\n      this.props.data,\n      this.props.derivedAttributes,\n      record => {\n        if (this.filter(record)) {\n          this.processRecord(record);\n        }\n      }\n    );\n  }\n\n  filter(record) {\n    for (const k in this.props.valueFilter) {\n      if (record[k] in this.props.valueFilter[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  forEachMatchingRecord(criteria, callback) {\n    return PivotData.forEachRecord(\n      this.props.data,\n      this.props.derivedAttributes,\n      record => {\n        if (!this.filter(record)) {\n          return;\n        }\n        for (const k in criteria) {\n          const v = criteria[k];\n          if (v !== (k in record ? record[k] : 'null')) {\n            return;\n          }\n        }\n        callback(record);\n      }\n    );\n  }\n\n  arrSort(attrs) {\n    let a;\n    const sortersArr = (() => {\n      const result = [];\n      for (a of Array.from(attrs)) {\n        result.push(getSort(this.props.sorters, a));\n      }\n      return result;\n    })();\n    return function(a, b) {\n      for (const i of Object.keys(sortersArr || {})) {\n        const sorter = sortersArr[i];\n        const comparison = sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return 0;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(this.arrSort(this.props.rows));\n      }\n      switch (this.props.colOrder) {\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(this.arrSort(this.props.cols));\n      }\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    for (const x of Array.from(this.props.cols)) {\n      colKey.push(x in record ? record[x] : 'null');\n    }\n    for (const x of Array.from(this.props.rows)) {\n      rowKey.push(x in record ? record[x] : 'null');\n    }\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\n    const flatColKey = colKey.join(String.fromCharCode(0));\n\n    this.allTotal.push(record);\n\n    if (rowKey.length !== 0) {\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(rowKey);\n        this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n    }\n\n    if (colKey.length !== 0) {\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(colKey);\n        this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n      }\n      this.colTotals[flatColKey].push(record);\n    }\n\n    if (colKey.length !== 0 && rowKey.length !== 0) {\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      if (!this.tree[flatRowKey][flatColKey]) {\n        this.tree[flatRowKey][flatColKey] = this.aggregator(\n          this,\n          rowKey,\n          colKey\n        );\n      }\n      this.tree[flatRowKey][flatColKey].push(record);\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\n    const flatColKey = colKey.join(String.fromCharCode(0));\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        },\n      }\n    );\n  }\n}\n\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function(input, derivedAttributes, f) {\n  let addRecord, record;\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\n    addRecord = f;\n  } else {\n    addRecord = function(record) {\n      for (const k in derivedAttributes) {\n        const derived = derivedAttributes[k](record);\n        if (derived !== null) {\n          record[k] = derived;\n        }\n      }\n      return f(record);\n    };\n  }\n\n  // if it's a function, have it call us back\n  if (typeof input === 'function') {\n    return input(addRecord);\n  } else if (Array.isArray(input)) {\n    if (Array.isArray(input[0])) {\n      // array of arrays\n      return (() => {\n        const result = [];\n        for (const i of Object.keys(input || {})) {\n          const compactRecord = input[i];\n          if (i > 0) {\n            record = {};\n            for (const j of Object.keys(input[0] || {})) {\n              const k = input[0][j];\n              record[k] = compactRecord[j];\n            }\n            result.push(addRecord(record));\n          }\n        }\n        return result;\n      })();\n    }\n\n    // array of objects\n    return (() => {\n      const result1 = [];\n      for (record of Array.from(input)) {\n        result1.push(addRecord(record));\n      }\n      return result1;\n    })();\n  }\n  throw new Error('unknown input format');\n};\n\nPivotData.defaultProps = {\n  aggregators: aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  valueFilter: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n  derivedAttributes: {},\n};\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func])\n    .isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.objectOf(PropTypes.func),\n  ]),\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n  colOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\n};\n\nexport {\n  aggregatorTemplates,\n  aggregators,\n  derivers,\n  locales,\n  naturalSort,\n  numberFormat,\n  getSort,\n  sortAs,\n  PivotData,\n};\n"]},"metadata":{},"sourceType":"script"}