{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\x245230\\\\desktop\\\\skillsmatrixaddy\\\\client\\\\src\\\\utils\\\\PrivateRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n/**\n * PrivateRoutes locks a route unless the open prop is true\n *\n * @param {Bool} open - if true, renders `q`compenent` prop. If false, redirects to `redirect` location\n * @param {Component} component - Component to render when accessible\n * @param {String} redirect - path to redirect to when inaccessible\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PrivateRoute(_ref) {\n  let {\n    open,\n    component: Component,\n    redirect,\n    ...rest\n  } = _ref;\n  // Return `component` if there exists a token (from traditional login) or a value for `open` variable (from OneLogin)\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => open ? /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: redirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Redirect","PrivateRoute","open","component","Component","redirect","rest","props"],"sources":["C:/Users/x245230/desktop/skillsmatrixaddy/client/src/utils/PrivateRoute.js"],"sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n/**\n * PrivateRoutes locks a route unless the open prop is true\n *\n * @param {Bool} open - if true, renders `q`compenent` prop. If false, redirects to `redirect` location\n * @param {Component} component - Component to render when accessible\n * @param {String} redirect - path to redirect to when inaccessible\n */\nfunction PrivateRoute({ open, component: Component, redirect, ...rest }) {\n  // Return `component` if there exists a token (from traditional login) or a value for `open` variable (from OneLogin)\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        open\n          ? <Component {...props} />\n          : <Redirect to={redirect} />\n      }\n    />\n  );\n\n}\n\nexport default PrivateRoute;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,YAAT,OAAyE;EAAA,IAAnD;IAAEC,IAAF;IAAQC,SAAS,EAAEC,SAAnB;IAA8BC,QAA9B;IAAwC,GAAGC;EAA3C,CAAmD;EACvE;EACA,oBACE,QAAC,KAAD,OACMA,IADN;IAEE,MAAM,EAAGC,KAAD,IACNL,IAAI,gBACA,QAAC,SAAD,OAAeK;IAAf;MAAA;MAAA;MAAA;IAAA,QADA,gBAEA,QAAC,QAAD;MAAU,EAAE,EAAEF;IAAd;MAAA;MAAA;MAAA;IAAA;EALR;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;KAbQJ,Y;AAeT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}